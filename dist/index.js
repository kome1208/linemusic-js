var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/index.ts
import got from "got";

// src/types.ts
var SortType = /* @__PURE__ */ ((SortType2) => {
  SortType2["Relevance"] = "RELEVANCE";
  SortType2["Popular"] = "POPLAR";
  SortType2["Release"] = "RELEASE";
  return SortType2;
})(SortType || {});
var SearchType = /* @__PURE__ */ ((SearchType2) => {
  SearchType2["Tracks"] = "tracks";
  SearchType2["Albums"] = "albums";
  SearchType2["Artists"] = "artists";
  SearchType2["Videos"] = "videos";
  SearchType2["Playlists"] = "playlists";
  SearchType2["Lyrics"] = "lyrics";
  return SearchType2;
})(SearchType || {});
var ShareType = /* @__PURE__ */ ((ShareType3) => {
  ShareType3["Track"] = "track";
  ShareType3["Album"] = "album";
  ShareType3["Artist"] = "artist";
  ShareType3["Video"] = "video";
  ShareType3["Playlist"] = "playlist";
  return ShareType3;
})(ShareType || {});
var FeaturedType = /* @__PURE__ */ ((FeaturedType2) => {
  FeaturedType2["Tracks"] = "tracks";
  FeaturedType2["Albums"] = "albums";
  return FeaturedType2;
})(FeaturedType || {});
var ChartType = /* @__PURE__ */ ((ChartType2) => {
  ChartType2["Tracks"] = "tracks";
  ChartType2["Albums"] = "albums";
  ChartType2["Videos"] = "videos";
  return ChartType2;
})(ChartType || {});
var BitRateType = /* @__PURE__ */ ((BitRateType2) => {
  BitRateType2["Min"] = "min";
  BitRateType2["Mid"] = "mid";
  BitRateType2["Max"] = "max";
  return BitRateType2;
})(BitRateType || {});

// src/index.ts
var LINEMusic = class {
  static {
    __name(this, "LINEMusic");
  }
  lmlc;
  deviceId;
  apiUrl = "https://music.line.me/api2";
  constructor(options) {
    this.lmlc = options.lmlc;
    this.deviceId = options.deviceId;
  }
  getHeaders() {
    return {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0",
      "Cookie": `lmlc=${this.lmlc}`,
      "x-lang": "ja",
      "x-lm-did": this.deviceId,
      "X-Requested-With": "XMLHttpRequest"
    };
  }
  async search(query, options = {
    start: 1,
    display: 3,
    sortType: "RELEVANCE" /* Relevance */,
    searchType: "tracks" /* Tracks */
  }) {
    const searchResponse = await got.get(
      `${this.apiUrl}/search/${options.searchType}.v1`,
      {
        searchParams: {
          "query": query,
          "start": options.start,
          "display": options.display,
          "sort": options.sortType
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(searchResponse.body).response.result.response.result;
  }
  async getLyrics(trackId, options = { nonSync: true, apiVersion: 1 }) {
    const getLyricsResponse = await got.get(
      `${this.apiUrl}/track/${trackId}/lyrics.v${options.apiVersion}`,
      {
        searchParams: {
          "nonSync": options.nonSync
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getLyricsResponse.body).response.result.lyric;
  }
  async getTrackSource(trackId, options = { bitRateType: "mid" /* Mid */ }) {
    const getTrackSourceResponse = await got.get(
      `${this.apiUrl}/track/${trackId}/source/forWebPlay.v1`,
      {
        searchParams: {
          "deviceId": this.deviceId,
          "forceAnonymous": false,
          "bitRateType": options.bitRateType,
          "t": Date.now()
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getTrackSourceResponse.body).response.result;
  }
  async getFeatured(type = "tracks" /* Tracks */, options = { start: 1, display: 100 }) {
    const getFeaturedResponse = await got.get(
      `${this.apiUrl}/${type == "tracks" /* Tracks */ ? "tracks/featuredNew" : "albums/featured"}.v1`,
      {
        searchParams: {
          "start": options.start,
          "display": options.display
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getFeaturedResponse.body).response.result;
  }
  async getChart(type = "tracks" /* Tracks */) {
    const getFeaturedResponse = await got.get(
      `${this.apiUrl}/chart/${type}.v1`,
      {
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getFeaturedResponse.body).response.result.chart;
  }
  async getAlbum(albumId) {
    const response = await got.get(
      `${this.apiUrl}/album/${albumId}.v1`,
      {
        headers: this.getHeaders()
      }
    );
    if (!response.ok) throw Error(response.body);
    return JSON.parse(response.body).response.result.album;
  }
  async getAlbumTracks(albumId, options = { display: 1e3 }) {
    const response = await got.get(
      `${this.apiUrl}/album/${albumId}/tracks.v1`,
      {
        searchParams: {
          "start": options.start,
          "display": options.display
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(response.body).response.result;
  }
  async getPlaylist(playlistId) {
    const response = await got.get(
      `${this.apiUrl}/playlist/${playlistId}.v2`,
      {
        headers: this.getHeaders()
      }
    );
    return JSON.parse(response.body).response.result.playlist;
  }
  async getTrack(trackId) {
    const response = await got.get(
      `${this.apiUrl}/track/${trackId}.v1`,
      {
        headers: this.getHeaders()
      }
    );
    return JSON.parse(response.body).response.result;
  }
  async getAutoCompletes(query) {
    const response = await got.get(
      `${this.apiUrl}/search/autoCompletes.v1`,
      {
        searchParams: {
          "query": query
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(response.body).response.result.sacList;
  }
  async getShareUrl(type, id) {
    const response = await got.get(
      `${this.apiUrl}/${type}/${id}/shareUrl.v1`,
      {
        headers: this.getHeaders()
      }
    );
    return JSON.parse(response.body).response.result;
  }
};
export {
  BitRateType,
  ChartType,
  FeaturedType,
  LINEMusic,
  SearchType,
  ShareType,
  SortType
};
//# sourceMappingURL=data:application/json;base64,