var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/index.ts
import got from "got";

// src/types.ts
var SortType = /* @__PURE__ */ ((SortType2) => {
  SortType2["Relevance"] = "RELEVANCE";
  SortType2["Popular"] = "POPLAR";
  SortType2["Release"] = "RELEASE";
  return SortType2;
})(SortType || {});
var SearchType = /* @__PURE__ */ ((SearchType2) => {
  SearchType2["Tracks"] = "tracks";
  SearchType2["Albums"] = "albums";
  SearchType2["Artists"] = "artists";
  SearchType2["Videos"] = "videos";
  SearchType2["Playlists"] = "playlists";
  SearchType2["Lyrics"] = "lyrics";
  return SearchType2;
})(SearchType || {});
var FeaturedType = /* @__PURE__ */ ((FeaturedType2) => {
  FeaturedType2["Tracks"] = "tracks";
  FeaturedType2["Albums"] = "albums";
  return FeaturedType2;
})(FeaturedType || {});
var ChartType = /* @__PURE__ */ ((ChartType2) => {
  ChartType2["Tracks"] = "tracks";
  ChartType2["Albums"] = "albums";
  ChartType2["Videos"] = "videos";
  return ChartType2;
})(ChartType || {});
var BitRateType = /* @__PURE__ */ ((BitRateType2) => {
  BitRateType2["Min"] = "min";
  BitRateType2["Mid"] = "mid";
  BitRateType2["Max"] = "max";
  return BitRateType2;
})(BitRateType || {});

// src/index.ts
var _LINEMusic = class _LINEMusic {
  constructor(options) {
    __publicField(this, "lmlc");
    __publicField(this, "deviceId");
    __publicField(this, "apiUrl", "https://music.line.me/api2");
    this.lmlc = options.lmlc;
    this.deviceId = options.deviceId;
  }
  getHeaders() {
    return {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0",
      "Cookie": `lmlc=${this.lmlc}`,
      "x-lang": "ja",
      "x-lm-did": this.deviceId,
      "X-Requested-With": "XMLHttpRequest"
    };
  }
  async search(query, options = {
    start: 1,
    display: 3,
    sortType: "RELEVANCE" /* Relevance */,
    searchType: "tracks" /* Tracks */
  }) {
    const searchResponse = await got.get(
      `${this.apiUrl}/search/${options.searchType}.v1`,
      {
        searchParams: {
          "query": query,
          "start": options.start,
          "display": options.display,
          "sort": options.sortType
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(searchResponse.body);
  }
  async getLyrics(trackId, options = { nonSync: true, apiVersion: 1 }) {
    const getLyricsResponse = await got.get(
      `${this.apiUrl}/track/${trackId}/lyrics.v1`,
      {
        searchParams: {
          "nonSync": options.nonSync
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getLyricsResponse.body);
  }
  async getTrackSource(trackId, options = { bitRateType: "mid" /* Mid */ }) {
    const getTrackSourceResponse = await got.get(
      `${this.apiUrl}/track/${trackId}/source/forWebPlay.v1`,
      {
        searchParams: {
          "bitRateType": options.bitRateType
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getTrackSourceResponse.body);
  }
  async getFeatured(type = "tracks" /* Tracks */, options = { start: 1, display: 100 }) {
    const getFeaturedResponse = await got.get(
      `${this.apiUrl}/${type == "tracks" /* Tracks */ ? "tracks/featuredNew" : "albums/featured"}.v1`,
      {
        searchParams: {
          "start": options.start,
          "display": options.display
        },
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getFeaturedResponse.body);
  }
  async getChart(type = "tracks" /* Tracks */) {
    const getFeaturedResponse = await got.get(
      `${this.apiUrl}/chart/${type}.v1`,
      {
        headers: this.getHeaders()
      }
    );
    return JSON.parse(getFeaturedResponse.body);
  }
};
__name(_LINEMusic, "LINEMusic");
var LINEMusic = _LINEMusic;
export {
  BitRateType,
  ChartType,
  FeaturedType,
  LINEMusic,
  SearchType,
  SortType
};
//# sourceMappingURL=data:application/json;base64,